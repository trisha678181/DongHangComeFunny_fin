<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 0. 하단  Namespaces 탭에서 aop, beans, context, mvc, tx 등 총 5개 체크
		 체크 후  Source 탭에서 12줄까지 들어간 것 확인-->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 2. 트랜잭션 어노테이션을 관리하는 태그 추가 -->
	<!-- 주의 : 해당 태그들은  mapper에 select, update, insert, delete 작성하고 
	serviceimpl	클래스까지 작성하고나서 주석해제 해야함 -->
	<!-- 
 	<tx:annotation-driven proxy-target-class="false"/> 
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			select로 시작하는 모든 메서드
			<tx:method name="select*"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception.class"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception.class"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception.class"/>
			
		</tx:attributes>
	</tx:advice>
	<aop:config>
		
			* all
			.. 0개이상
		
		 접근제한자(생략가능) 반환형(필수) 패키지(생략가능) 클래스명(생략가능) 메서드(매개변수)
		<aop:pointcut expression="execution(* com.DongHang_ComeFunny.www..*.*ServiceImpl.*(..))"
		 id="requiredTx" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>
	</aop:config> 
	-->
	<!-- 1. aop 오토 프록시 추가 -->
	<!-- 주의 : common.aop.LogAop 패키지 및 클래스 부터 생성 후 설정 -->
	<aop:aspectj-autoproxy />
	<!-- 1-1. aop가 개입하여 메소드 실행때마다 로그기록 남기기 위한 bean 설정 -->
	<!-- bean 추가 하기 전에 commn.aop 패키지 아래 LogAop 클래스 생성해야 인식 가능 -->
	<beans:bean name="logAop" class="common.aop.LogAop"></beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.DongHang_ComeFunny.www, com.DongHang_ComeFunny.www.*" />
	
	
	
	
</beans:beans>
